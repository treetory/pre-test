/*
 * This file is generated by jOOQ.
 */
package com.treetory.dsltest.model.tables;


import com.treetory.dsltest.model.MplusTestData;
import com.treetory.dsltest.model.tables.records.GetexamlistRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getexamlist extends TableImpl<GetexamlistRecord> {

    private static final long serialVersionUID = -937821153;

    /**
     * The reference instance of <code>mplus_test_data.getexamlist</code>
     */
    public static final Getexamlist GETEXAMLIST = new Getexamlist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetexamlistRecord> getRecordType() {
        return GetexamlistRecord.class;
    }

    /**
     * The column <code>mplus_test_data.getexamlist.hospitalCd</code>.
     */
    public final TableField<GetexamlistRecord, String> HOSPITALCD = createField("hospitalCd", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.patientId</code>.
     */
    public final TableField<GetexamlistRecord, String> PATIENTID = createField("patientId", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examClsCd</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMCLSCD = createField("examClsCd", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examClsNm</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMCLSNM = createField("examClsNm", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examCls2Cd</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMCLS2CD = createField("examCls2Cd", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examCls2Nm</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMCLS2NM = createField("examCls2Nm", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examCd</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMCD = createField("examCd", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examNm</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMNM = createField("examNm", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examReceiptDt</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMRECEIPTDT = createField("examReceiptDt", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examDt</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMDT = createField("examDt", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examStatNm</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMSTATNM = createField("examStatNm", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.isPacs</code>.
     */
    public final TableField<GetexamlistRecord, String> ISPACS = createField("isPacs", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.examRsltTy</code>.
     */
    public final TableField<GetexamlistRecord, String> EXAMRSLTTY = createField("examRsltTy", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.exmaRsltKey</code>.
     */
    public final TableField<GetexamlistRecord, String> EXMARSLTKEY = createField("exmaRsltKey", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.exmaRsltKey2</code>.
     */
    public final TableField<GetexamlistRecord, String> EXMARSLTKEY2 = createField("exmaRsltKey2", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mplus_test_data.getexamlist.exmaRsltKey3</code>.
     */
    public final TableField<GetexamlistRecord, String> EXMARSLTKEY3 = createField("exmaRsltKey3", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>mplus_test_data.getexamlist</code> table reference
     */
    public Getexamlist() {
        this(DSL.name("getexamlist"), null);
    }

    /**
     * Create an aliased <code>mplus_test_data.getexamlist</code> table reference
     */
    public Getexamlist(String alias) {
        this(DSL.name(alias), GETEXAMLIST);
    }

    /**
     * Create an aliased <code>mplus_test_data.getexamlist</code> table reference
     */
    public Getexamlist(Name alias) {
        this(alias, GETEXAMLIST);
    }

    private Getexamlist(Name alias, Table<GetexamlistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Getexamlist(Name alias, Table<GetexamlistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Getexamlist(Table<O> child, ForeignKey<O, GetexamlistRecord> key) {
        super(child, key, GETEXAMLIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MplusTestData.MPLUS_TEST_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getexamlist as(String alias) {
        return new Getexamlist(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getexamlist as(Name alias) {
        return new Getexamlist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Getexamlist rename(String name) {
        return new Getexamlist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Getexamlist rename(Name name) {
        return new Getexamlist(name, null);
    }
}
